#!/usr/bin/env python

import copy
import os, sys, ROOT, math
from math import exp, atan
from array import array
#from rootpy.interactive import wait

rndm = ROOT.TRandom(1)
SpeedOfLight = 30

def readLorentzVector():
  print sys.argv[1]
  f = ROOT.TFile(sys.argv[1])
  f2=ROOT.TFile(sys.argv[2])
  
  mychain2 =f2.Get("HSCPTree/tree;1") #Muons
  mychain = f.Get("HSCPTree/tree;1") #HSCP
  entries = mychain.GetEntriesFast()
  
  #Save file parameters
  str_save="plots/"
  #str_save="plots/new/Go"
  #str_save="plots/HSCP_old_NoPU/"
  #str_save="plots/910pre3/"
  str_form=".pdf"
  
  c1=ROOT.TCanvas()
  seriousHistL=[]
  cseriousHistL=[]
  sRange=[[-10,100],[-10,100],[-10,100],[-10,100],[-35,85],[-10,200],[-10,200],[0,1000]]*3
  numBin=150
  for i in range(12):
    s="seriousHist"+str(i)
    sc="cseriousHist"+str(i)
    seriousHistL.append(ROOT.TH1F(s,"placeholder",numBin,sRange[i][0],sRange[i][1]))
    cseriousHistL.append(ROOT.TH1F(sc,"placeholder",numBin,sRange[i][0],sRange[i][1]))
  numBin=150
  RangeSplit=[i*1000/150 for i in range(0,150)]


  def findClosestDigi (x, y, z, pos1, pos2) :
    return (x-pos1[0])**2+(y-pos1[1])**2+(z-pos1[2])**2<(x-pos2[0])**2+(y-pos2[1])**2+(z-pos2[2])**2
 

  def isWithinTheCone (x, y, z, pos1, pos2) :
    return sqrt((x-pos1[0])**2+(y-pos1[1])**2+(z-pos1[2])**2) < 10
           
          
  cMax=[-100000]*10
  cMin=[100000]*10
  
  n1_isIRPC = 0
  n2_isIRPC = 0
  
  Max=[-100000]*10
  Min=[100000]*10
  global HSCPmass
  HSCPmass = 0
  def timePlots (chain,HistL,Min,Max):
    for event in chain:
      n=len(event.simDigi1_isIRPC)
      n2=len(event.simDigi2_isIRPC)
      m=len(event.rpcHit_isIRPC)
      pos11=(0,0,0)
      pos12=(0,0,0)
      pos21=(0,0,0)
      pos22=(0,0,0)

      r011,r012,r021,r022=[0,0,0,0]
      
      for i in range(n):
        if event.simDigi1_isIRPC[i]:
          if (abs(event.simDigi1_z[i])<1000 and abs(event.simDigi1_z[i])>900):
            pos11=(event.simDigi1_x[i],event.simDigi1_y[i],event.simDigi1_z[i])
            r011 = (event.simDigi1_tof[i]- event.simDigi1_t0[i])*SpeedOfLight
          elif abs(event.simDigi1_z[i])>1000 :
            pos12=(event.simDigi1_x[i],event.simDigi1_y[i],event.simDigi1_z[i])
            r012 = (event.simDigi1_tof[i]- event.simDigi1_t0[i])*SpeedOfLight
      for i in range(n2):
        if event.simDigi2_isIRPC[i]:
          if (abs(event.simDigi2_z[i])<1000 and abs(event.simDigi2_z[i])>900):
            pos21=(event.simDigi2_x[i],event.simDigi2_y[i],event.simDigi2_z[i])
            r021 = (event.simDigi2_tof[i]- event.simDigi2_t0[i])*SpeedOfLight
          elif abs(event.simDigi2_z[i])>1000 :
            pos22=(event.simDigi2_x[i],event.simDigi2_y[i],event.simDigi2_z[i])
            r022 = (event.simDigi2_tof[i]- event.simDigi2_t0[i])*SpeedOfLight

      t01,t02,tr1,tr2,dt,chi=[0,0,0,0,0,0]



      fakeRE31 = []
      fakeRE41 = []


      for i in range(m):
        if event.rpcHit_isIRPC[i]:
          if (abs(event.rpcHit_z[i])<1000 and abs(event.rpcHit_z[i])>900)) 
             if not isWithinTheCone(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos11) and not isWithinTheCone(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos21):
               tr1=event.rpcHit_time[i]-(math.sqrt(event.rpcHit_y[i]**2+event.rpcHit_x[i]**2+event.rpcHit_z[i]**2)-r011)/SpeedOfLight
               fakeRE31.append(tr1)


          elif abs(event.rpcHit_z[i])>1000):
            if not isWithinTheCone(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos21) and not isWithinTheCone(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos22):
              tr2=event.rpcHit_time[i]-(math.sqrt(event.rpcHit_y[i]**2+event.rpcHit_x[i]**2+event.rpcHit_z[i]**2)-r012)/SpeedOfLight
              fakeRE41.append(tr2)


      print "size31  ",len(fakeRE31)
      print "size41  ",len(fakeRE41)

readLorentzVector()

