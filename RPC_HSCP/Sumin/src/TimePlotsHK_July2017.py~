#!/usr/bin/env python

import copy
import os, sys, ROOT, math
from math import exp, atan
from array import array
#from rootpy.interactive import wait

rndm = ROOT.TRandom(1)
SpeedOfLight = 30

def readLorentzVector():
  print sys.argv[1]
  f = ROOT.TFile(sys.argv[1])
  f2=ROOT.TFile(sys.argv[2])
  
  mychain2 =f2.Get("HSCPTree/tree;1") #Muons
  mychain = f.Get("HSCPTree/tree;1") #HSCP
  entries = mychain.GetEntriesFast()
  
  #Save file parameters
  str_save="plots/new/release/001/1599/"
  #str_save="plots/new/Go"
  #str_save="plots/HSCP_old_NoPU/"
  #str_save="plots/910pre3/"
  str_form=".root"
  
  c1=ROOT.TCanvas()
  seriousHistL=[]
  cseriousHistL=[]
  sRange=[[-10,100],[-10,100],[-10,100],[-10,100],[-35,85],[-10,200],[-10,200],[0,1000]]*3
  numBin=150
  for i in range(12):
    s="seriousHist"+str(i)
    sc="cseriousHist"+str(i)
    seriousHistL.append(ROOT.TH1F(s,"placeholder",numBin,sRange[i][0],sRange[i][1]))
    cseriousHistL.append(ROOT.TH1F(sc,"placeholder",numBin,sRange[i][0],sRange[i][1]))
  numBin=150
  RangeSplit=[i*1000/150 for i in range(0,150)]


  def findClosestDigi (x, y, z, pos1, pos2) :
    return (x-pos1[0])**2+(y-pos1[1])**2+(z-pos1[2])**2<(x-pos2[0])**2+(y-pos2[1])**2+(z-pos2[2])**2
           
  cMax=[-100000]*10
  cMin=[100000]*10
  
  n1_isIRPC = 0
  n2_isIRPC = 0
  
  Max=[-100000]*10
  Min=[100000]*10
  global HSCPmass
  HSCPmass = 0
  def timePlots (chain,HistL,Min,Max):
    for event in chain:
      n=len(event.simDigi1_isIRPC)
      n2=len(event.simDigi2_isIRPC)
      m=len(event.rpcHit_isIRPC)
      pos11=(0,0,0)
      pos12=(0,0,0)
      pos21=(0,0,0)
      pos22=(0,0,0)

      r011,r012,r021,r022=[0,0,0,0]
      
      for i in range(n):
        if event.simDigi1_isIRPC[i]:
          if (abs(event.simDigi1_z[i])<1000 and abs(event.simDigi1_z[i])>900):
            pos11=(event.simDigi1_x[i],event.simDigi1_y[i],event.simDigi1_z[i])
            r011 = (event.simDigi1_tof[i]- event.simDigi1_t0[i])*SpeedOfLight
          elif abs(event.simDigi1_z[i])>1000 :
            pos12=(event.simDigi1_x[i],event.simDigi1_y[i],event.simDigi1_z[i])
            r012 = (event.simDigi1_tof[i]- event.simDigi1_t0[i])*SpeedOfLight
      for i in range(n2):
        if event.simDigi2_isIRPC[i]:
          if (abs(event.simDigi2_z[i])<1000 and abs(event.simDigi2_z[i])>900):
            pos21=(event.simDigi2_x[i],event.simDigi2_y[i],event.simDigi2_z[i])
            r021 = (event.simDigi2_tof[i]- event.simDigi2_t0[i])*SpeedOfLight
          elif abs(event.simDigi2_z[i])>1000 :
            pos22=(event.simDigi2_x[i],event.simDigi2_y[i],event.simDigi2_z[i])
            r022 = (event.simDigi2_tof[i]- event.simDigi2_t0[i])*SpeedOfLight

      t01,t02,tr1,tr2,dt,chi=[0,0,0,0,0,0]



      for i in range(n):
        if event.simDigi1_isIRPC[i]:
          if (abs(event.simDigi1_z[i])<1000 and abs(event.simDigi1_z[i])>900):
            t01=(event.simDigi1_t0[i])
          elif abs(event.simDigi1_z[i])>1000 :
            t02=(event.simDigi1_t0[i])
      for i in range(m):
        if event.rpcHit_isIRPC[i]:
          if (abs(event.rpcHit_z[i])<1000 and abs(event.rpcHit_z[i])>900) and findClosestDigi(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos11,pos21):
            tr1=event.rpcHit_time[i]-(math.sqrt(event.rpcHit_y[i]**2+event.rpcHit_x[i]**2+event.rpcHit_z[i]**2)-r011)/SpeedOfLight
          elif abs(event.rpcHit_z[i])>1000 and findClosestDigi(event.rpcHit_x[i],event.rpcHit_y[i],event.rpcHit_z[i],pos12,pos22):
            tr2=event.rpcHit_time[i]-(math.sqrt(event.rpcHit_y[i]**2+event.rpcHit_x[i]**2+event.rpcHit_z[i]**2)-r012)/SpeedOfLight

      if t01:
        HistL[0].Fill(t01)
        if t01<Min[0]:Min[0]=t01
        elif t01>Max[0]:Max[0]=t01
      if t02:
        HistL[1].Fill(t02)
        if t02<Min[1]:Min[1]=t02
        elif t02>Max[1]:Max[1]=t02
      if tr1:
        HistL[2].Fill(tr1)
        if tr1<Min[2]:Min[2]=tr1
        elif tr1>Max[2]:Max[2]=tr1
      if tr2:
        HistL[3].Fill(tr2)
        if tr2<Min[3]:Min[3]=tr2
        elif tr2>Max[3]:Max[3]=tr2
      if tr1 and tr2:
        dt=tr2-tr1
        HistL[4].Fill(dt)
        if dt<Min[4]:Min[4]=dt
        elif dt>Max[4]:Max[4]=dt
        chi=tr2**2+tr1**2
        HistL[5].Fill(chi)
        if dt > -2:
          HistL[6].Fill(chi)

    
  timePlots(mychain,seriousHistL,Min,Max)
  timePlots(mychain2,cseriousHistL,Min,Max)
  print (Min, Max)
  #print ("muons :",cMin, cMax)

  c1=ROOT.TCanvas()
  seriousHistL[0].SetLineColor(ROOT.kRed)
  seriousHistL[0].GetXaxis().SetTitle('Time delay')
  seriousHistL[0].GetYaxis().SetTitle('N_Particles')
  seriousHistL[2].SetTitle('First chamber, HSCP')
  seriousHistL[2].SetLineColor(ROOT.kBlue)
  seriousHistL[2].Draw("HIST")
  seriousHistL[0].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(seriousHistL[0],"Digital Hits","l")
  legend.AddEntry(seriousHistL[2],"RPC_Hits","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeHSCPFirst"+str_form)

  c1=ROOT.TCanvas()
  cseriousHistL[0].SetLineColor(ROOT.kRed)
  cseriousHistL[0].GetXaxis().SetTitle('Time delay')
  cseriousHistL[0].GetYaxis().SetTitle('N_Particles')
  cseriousHistL[0].SetTitle('First chamber, muons')
  cseriousHistL[0].Draw("HIST")
  cseriousHistL[2].SetLineColor(ROOT.kBlue)
  cseriousHistL[2].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(cseriousHistL[0],"Digital Hits","l")
  legend.AddEntry(cseriousHistL[2],"RPC_Hits","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeMuonsFirst"+str_form)

  c1=ROOT.TCanvas()
  seriousHistL[1].SetLineColor(ROOT.kRed)
  seriousHistL[1].GetXaxis().SetTitle('Time delay')
  seriousHistL[1].GetYaxis().SetTitle('N_Particles')
  seriousHistL[3].SetTitle('Second chamber, HSCP')
  seriousHistL[3].SetLineColor(ROOT.kBlue)
  seriousHistL[3].Draw("HIST")
  seriousHistL[1].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(seriousHistL[1],"Digital Hits","l")
  legend.AddEntry(seriousHistL[3],"RPC_Hits","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeHSCPSecond"+str_form)

  c1=ROOT.TCanvas()
  cseriousHistL[1].SetLineColor(ROOT.kRed)
  cseriousHistL[1].GetXaxis().SetTitle('Time delay')
  cseriousHistL[1].GetYaxis().SetTitle('N_Particles')
  cseriousHistL[1].SetTitle('Second chamber, muons')
  cseriousHistL[1].Draw("HIST")
  cseriousHistL[3].SetLineColor(ROOT.kBlue)
  cseriousHistL[3].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(cseriousHistL[1],"Digital Hits","l")
  legend.AddEntry(cseriousHistL[3],"RPC_Hits","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeMuonsSecond"+str_form)

  c1=ROOT.TCanvas()
  cseriousHistL[4].SetLineColor(ROOT.kRed)
  cseriousHistL[4].GetXaxis().SetTitle('Time delay difference')
  cseriousHistL[4].GetXaxis().SetRangeUser(-20, 20)
  cseriousHistL[4].GetYaxis().SetTitle('N_Particles')
  cseriousHistL[4].SetTitle('Difference between second and first chamber')
  seriousHistL[4].SetLineColor(ROOT.kBlue)

  norm_mu = cseriousHistL[4].Integral()  # MG normalize to unity
  cseriousHistL[4].Scale(1./norm_mu)  # MG normalize to unity
  norm_hscp = seriousHistL[4].Integral()  # MG normalize to unity
  seriousHistL[4].Scale(1./norm_hscp)  # MG normalize to unity


  cseriousHistL[4].Draw("HIST")
  seriousHistL[4].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(cseriousHistL[4],"Muons","l")
  legend.AddEntry(seriousHistL[4],"HSCP","l")
  legend.Draw() 

  cseriousHistL[4].SetMaximum(0.3)

  c1.SaveAs(str_save+"timeDiff"+str_form)

  c1=ROOT.TCanvas()
  cseriousHistL[5].SetLineColor(ROOT.kRed)
  seriousHistL[5].SetLineColor(ROOT.kBlue)
  cseriousHistL[5].GetXaxis().SetTitle('Chi2')
  cseriousHistL[5].GetYaxis().SetTitle('N_Particles')
  cseriousHistL[5].SetTitle('Square sum of second and first chamber')


  norm_mu = cseriousHistL[5].Integral()  # MG normalize to unity
  cseriousHistL[5].Scale(1./norm_mu)  # MG normalize to unity
  norm_hscp = seriousHistL[5].Integral()  # MG normalize to unity
  seriousHistL[5].Scale(1./norm_hscp)  # MG normalize to unity



  cseriousHistL[5].Draw("HIST")
  seriousHistL[5].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(cseriousHistL[4],"Muons","l")
  legend.AddEntry(seriousHistL[4],"HSCP","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeChi"+str_form)


  c1=ROOT.TCanvas()
  cseriousHistL[6].SetLineColor(ROOT.kRed)
  cseriousHistL[6].GetXaxis().SetTitle('Chi2')
  cseriousHistL[6].GetYaxis().SetTitle('N_Particles')
  cseriousHistL[6].SetTitle('Square sum of second and first chamber for positive propagation')
  cseriousHistL[6].Scale(1./norm_mu)  # MG normalize to unity
  cseriousHistL[6].Draw("HIST")

  seriousHistL[6].SetLineColor(ROOT.kBlue)
  seriousHistL[6].Scale(1./norm_hscp)  # MG normalize to unity
  seriousHistL[6].Draw("SAME HIST")
  legend = ROOT.TLegend(0.13,0.80,0.30,0.97)
  legend.AddEntry(cseriousHistL[4],"Muons","l")
  legend.AddEntry(seriousHistL[4],"HSCP","l")
  legend.Draw() 
  c1.SaveAs(str_save+"timeChi_pos"+str_form)



  c1=ROOT.TCanvas()
  propHist=ROOT.TGraph(numBin)
  n1 = seriousHistL[5].Integral()
  n2 = cseriousHistL[5].Integral()
 
  count1=n1
  count2=n2
  print("nentries hist5 :",n1,n2)
  for q in range(numBin):
      count1-=seriousHistL[5].GetBinContent(q)
      count2-=cseriousHistL[5].GetBinContent(q)
      propHist.SetPoint(q,count1/n1,count2/n2)
  print(count1,count2,n1,n2)

# MG beggin: chi2 avec condition positive

  propHist_pos=ROOT.TGraph(numBin)
  n1_pos = seriousHistL[6].Integral()
  n2_pos = cseriousHistL[6].Integral()

  count1=n1_pos
  count2=n2_pos

  print("nentries hist6 :",n1_pos,n2_pos)
  for q in range(numBin):
      count1-=seriousHistL[6].GetBinContent(q)
      count2-=cseriousHistL[6].GetBinContent(q)
      propHist_pos.SetPoint(q,count1/n1,count2/n2)
  print(count1,count2,n1,n2)

# MG end

  propHist.SetTitle( 'Muons vs '+str(HSCPmass)+' HSCP kept')
  propHist.Draw()
  propHist.GetXaxis().SetTitle('HSCP')
  propHist.GetYaxis().SetTitle('Muons')
  propHist.SetMarkerColor(ROOT.kBlue)
  propHist.SetMarkerStyle(21)

  propHist.Draw("PE")



  propHist_pos.SetMarkerColor(ROOT.kRed)
  propHist_pos.SetMarkerStyle(20)

  propHist_pos.Draw("SAMEPE")


  legend = ROOT.TLegend(0.13,0.70,0.30,0.87)
  legend.AddEntry(propHist,"chi2 discri","p")
  legend.AddEntry(propHist_pos,"chi2 + (dT > -2 ns)","p")
  legend.Draw() 

  c1.SetLogy()
  c1.SaveAs(str_save+"graal"+str_form)

readLorentzVector()

